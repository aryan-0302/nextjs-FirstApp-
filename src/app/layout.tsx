import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import Navbar from "@/components/Navbar";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

// Layout is like parent and it will be pass to all the childrens(page.js,etc)
// In Typescript we have to tell the type of children:here it is React.ReactNode
export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en" className="dark">
      <body className={`${geistSans.variable} ${geistMono.variable} antialiased`}>
          <div className="relative w-full flex items-center justify-center">
          <Navbar></Navbar>
          </div>
        {children}
      </body>
    </html>
  );
}

// If you have a page.js and a layout.js file in the app folder, they will serve as the parent for all the files and folders within the app folder hierarchy.
// page.js: Defines the content or view for the root route (/).
// layout.js: Acts as a wrapper or parent layout for all nested routes and components within the app folder.